{"version":3,"sources":["utils/api.js","components/DataTable/DataTable.js","components/search/search.js","components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["getUser","axios","get","DataTable","employees","searchTerm","sortHandler","className","scope","onClick","filter","employee","name","last","toLowerCase","startsWith","first","map","person","id","key","src","picture","thumbnail","title","gender","moment","dob","date","format","email","cell","Search","handleInputChange","onChange","value","type","placeholder","PageHeader","App","event","setState","target","state","sorted","bind","then","res","data","results","item","sortedNames","this","sort","a","b","localeCompare","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0a0864d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst getUser = axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n\r\nexport default getUser; ","import React from 'react';\r\nimport moment from \"moment\";\r\nimport \"./DataTable.css\";\r\n\r\nfunction DataTable({employees, searchTerm, sortHandler}) {\r\n    return (\r\n        <table className=\"table table-dark table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Headshot</th>\r\n                    <th scope=\"col\">Title</th>\r\n                    <th scope=\"col\" onClick={() => { sortHandler(\"first\") }}>First Name</th>\r\n                    <th scope=\"col\" onClick={() => { sortHandler(\"last\") }}>Last Name</th>\r\n                    <th scope=\"col\">Gender</th>\r\n                    <th scope=\"col\">Date of Birth</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">Phone Number</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {employees.filter(employee => employee.name.last.toLowerCase().startsWith(searchTerm.toLowerCase()) || employee.name.first.toLowerCase().startsWith(searchTerm.toLowerCase())).map((person, id) =>\r\n                    <tr key={id}>\r\n                        <td><img src={person.picture.thumbnail}></img></td>\r\n                        <td>{person.name.title}</td>\r\n                        <td>{person.name.first}</td>\r\n                        <td>{person.name.last}</td>\r\n                        <td>{person.gender}</td>\r\n                        <td>{moment(person.dob.date).format(\"L\")}</td>\r\n                        <td>{person.email}</td>\r\n                        <td>{person.cell}</td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default DataTable;","import React from 'react';\r\nimport \"./search.css\";\r\n\r\nfunction Search({searchTerm, handleInputChange}) {\r\n    return (\r\n        <div className=\"search\">\r\n            <label id=\"label\">Filter:</label>\r\n            <input \r\n            onChange={handleInputChange}\r\n            value={searchTerm}\r\n            name=\"search\"\r\n            type=\"text\"\r\n            placeholder=\"Filter employees by First or Last Name\"\r\n            id=\"search\" \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport \"./header.css\";\r\n\r\nfunction PageHeader() {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"jumbotron jumbotron-fluid\" id=\"jumbo\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-2\">Employee Directory</h1>\r\n                    <p className=\"lead\">Please use the search bar below to search through all of the employees.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageHeader;","import React from 'react';\n// import lodash from \"lodash\"; _get in lodash\nimport getUser from \"./utils/api.js\"\nimport './App.css';\nimport DataTable from \"./components/DataTable/DataTable.js\";\nimport Search from \"./components/search/search.js\";\nimport PageHeader from \"./components/header/header.js\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      employees: [],\n      searchTerm: \"\",\n      sorted: false\n    };\n    this.sortHandler = this.sortHandler.bind(this)\n  };\n    \n    componentDidMount() {\n    getUser\n      .then((res) => {\n        this.setState({ employees: res.data.results });\n      });\n  };\n\n  handleInputChange = event => {\n    this.setState({\n      searchTerm: event.target.value\n    });\n  };\n\n  sortHandler(item) {\n    let sortedNames;\n    if (!this.state.sorted) {\n      sortedNames = this.state.employees.sort((a, b) => { return b.name[item].localeCompare(a.name[item]) });\n      this.setState({ employees: sortedNames, sorted: true });\n    }\n    else {\n      sortedNames = this.state.employees.sort((a, b) => { return a.name[item].localeCompare(b.name[item]) });\n      this.setState({ employees: sortedNames, sorted: false });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\" id=\"contain\">\n        <PageHeader\n        />\n        <Search\n          searchTerm={this.state.searchTerm}\n          handleInputChange={this.handleInputChange}\n        />\n        <DataTable\n          employees={this.state.employees}\n          sortHandler={this.sortHandler}\n          searchTerm={this.state.searchTerm}\n        />\n      </div>\n    )\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}